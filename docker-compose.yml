version: "2.2"
services:
  sql-client:
    container_name: 'sql-client'
    build:
      context: .
      dockerfile: sql-client/Dockerfile
    depends_on:
      - jobmanager
    environment:
      FLINK_JOBMANAGER_HOST: jobmanager
    volumes:
      - ./settings/:/settings

  jobmanager:
    image: flink:1.16.0-scala_2.12-java11
    ports:
      - "8088:8088"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
    volumes:
      - ./settings/:/settings
      - ./data/:/data

  taskmanager:
    image: flink:1.16.0-scala_2.12-java11
    depends_on:
      - jobmanager
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 10
    volumes:
      - ./settings/:/settings
      - ./data/:/data

  message_queue:
    image: "docker.vectorized.io/vectorized/redpanda:latest"
    command:
      - redpanda
      - start
      - "--smp"
      - "1"
      - "--reserve-memory"
      - 0M
      - "--memory"
      - 4G
      - "--overprovisioned"
      - "--node-id"
      - "0"
      - "--check=false"
      - "--kafka-addr"
      - "PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092"
      - "--advertise-kafka-addr"
      - "PLAINTEXT://message_queue:29092,OUTSIDE://localhost:9092"
    expose:
      - "29092"
      - "9092"
      - "9644"
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9644:9644"
      - "8081:8081"
    depends_on: []
    volumes:
      - "message_queue:/usr/local/opt/redpanda/data"
    environment: {}
    container_name: message_queue
    healthcheck:
      test:
        - CMD-SHELL
        - bash -c 'printf \"GET / HTTP/1.1\n\n\" > /dev/tcp/127.0.0.1/9092; exit $?;'
      interval: 1s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:14-alpine
    environment:
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=123456
      - POSTGRES_DB=mydb
    ports:
      - 8432:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready --username=myuser --dbname=mydb" ]
      interval: 5s
      timeout: 5s
      retries: 5
    command: [ "postgres", "-c", "wal_level=logical" ]
    restart: always
    container_name: postgres

  debezium:
    image: debezium/connect:1.9
    environment:
      BOOTSTRAP_SERVERS: message_queue:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://message_queue:8081
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://message_queue:8081
    ports:
      - 8083:8083
    healthcheck:
      test: curl -f localhost:8083
      interval: 1s
      start_period: 120s
    depends_on:
      message_queue: { condition: service_healthy }
      postgres: { condition: service_healthy }
    container_name: debezium

volumes:
  message_queue:
    external: false

